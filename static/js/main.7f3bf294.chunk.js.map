{"version":3,"sources":["dal/api.ts","bll/chat-reducer.ts","components/Header/materialUIstyles.ts","components/Header/Header.tsx","components/UserName/materialUIstyles.ts","components/UserName/UserName.tsx","components/EnterUserName/materialUIstyles.ts","components/EnterUserName/EnterUserName.tsx","components/Message/Message.tsx","components/WritingUser/WritingUser.tsx","features/Chat/materialUIstyles.ts","features/Chat/Chat.tsx","components/Routes/Routes.tsx","features/App/App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx","features/App/App.module.css"],"names":["API","socket","createChannel","this","io","transports","destroyChannel","close","subscribe","messagesShowed","newMessageSent","writingMessage","on","sendClientName","name","emit","sendMessage","message","initialState","messages","writingUsers","useStyles","makeStyles","createStyles","root","flexGrow","Header","React","memo","classes","className","AppBar","position","Toolbar","variant","Typography","color","width","height","display","flexDirection","justifyContent","alignItems","title","fontSize","fontWeight","UserName","history","useHistory","Card","CardContent","gutterBottom","CardActions","Button","size","onClick","push","PATH","ENTER_USER_NAME","CHAT","input","marginRight","EnterUserName","useState","setName","error","setError","dispatch","useDispatch","messageError","TextField","value","id","label","autoComplete","onChange","e","currentTarget","helperText","onBlur","disabled","trim","setClientNameTC","Message","user","WritingUser","padding","minHeight","chatBlock","overflowY","minWidth","backgroundColor","borderRadius","formBlock","marginTop","button","right","Chat","setValue","useSelector","state","chat","isAutoScroll","setIsAutoScroll","lastScrollTop","setLastScrollTop","messagesEndRef","useRef","useEffect","scrollToBottom","current","scrollIntoView","behavior","onScroll","element","maxScrollPosition","scrollHeight","clientHeight","difference","Math","abs","scrollTop","map","m","u","user_id","ref","multiline","maxRows","target","onKeyPress","USER_NAME","Routes","exact","path","render","App","type","messagesReceivedAC","newMessageSentAC","writingUserAC","styles","main","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7f3bf294.chunk.js","sourcesContent":["import {io, Socket} from \"socket.io-client\";\r\n\r\nexport type UserType = {\r\n    user_id: string\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    user: UserType\r\n    message: string\r\n    id: string\r\n}\r\n\r\ntype MessagesShowedCallback = (messages: Array<MessageType>) => void\r\ntype NewMessageSentCallback = (message: MessageType) => void\r\ntype UserWritingMessageCallback = (user: UserType) => void\r\n\r\nexport const API = {\r\n    socket: null as Socket | null,\r\n    createChannel() {\r\n        this.socket = io(\"https://simple-chat-back.herokuapp.com\", {transports: ['websocket', 'polling', 'flashsocket']})\r\n        // this.socket = io(\"http://localhost:3009\", {transports: ['websocket', 'polling', 'flashsocket']})\r\n    },\r\n    destroyChannel() {\r\n        this.socket?.close()\r\n        this.socket = null\r\n    },\r\n    subscribe(messagesShowed: MessagesShowedCallback, newMessageSent: NewMessageSentCallback, writingMessage: UserWritingMessageCallback) {\r\n        this.socket?.on(\"messages-showed\", messagesShowed)\r\n        this.socket?.on(\"new-message-sent\", newMessageSent)\r\n        this.socket?.on(\"writing-message\", writingMessage)\r\n    },\r\n    sendClientName(name: string) {\r\n        this.socket?.emit(\"client-sent-name\", name)\r\n    },\r\n    sendMessage(message: string) {\r\n        this.socket?.emit(\"client-sent-message\", message)\r\n    },\r\n    writingMessage() {\r\n        this.socket?.emit(\"client-writing-message\")\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {API, MessageType, UserType} from \"../dal/api\";\r\n\r\ntype ChatReducerActionsType =\r\n    ReturnType<typeof messagesReceivedAC>\r\n    | ReturnType<typeof newMessageSentAC>\r\n    | ReturnType<typeof writingUserAC>\r\n\r\nconst initialState = {\r\n    messages: [] as Array<MessageType>,\r\n    writingUsers: [] as Array<UserType>\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const chatReducer = (state: InitialStateType = initialState, action: ChatReducerActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"CHAT/MESSAGES-RECEIVED\":\r\n            return {...state, messages: action.messages}\r\n        case \"CHAT/NEW-MESSAGES-SENT\":\r\n            return {\r\n                ...state, messages: [...state.messages, action.message],\r\n                writingUsers: state.writingUsers.filter(u => u.user_id !== action.message.user.user_id)\r\n            }\r\n        case \"CHAT/WRITING-USER\":\r\n            return {\r\n                ...state,\r\n                writingUsers: [...state.writingUsers.filter(u => u.user_id !== action.user.user_id), action.user]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst messagesReceivedAC = (messages: Array<MessageType>) =>\r\n    ({type: \"CHAT/MESSAGES-RECEIVED\", messages} as const)\r\nconst newMessageSentAC = (message: MessageType) =>\r\n    ({type: \"CHAT/NEW-MESSAGES-SENT\", message} as const)\r\nconst writingUserAC = (user: UserType) =>\r\n    ({type: \"CHAT/WRITING-USER\", user} as const)\r\n\r\nexport const createChannelTC = () => (dispatch: Dispatch) => {\r\n    API.createChannel()\r\n    API.subscribe(\r\n        (messages: Array<MessageType>) => {\r\n            dispatch(messagesReceivedAC(messages))\r\n        },\r\n        (message: MessageType) => {\r\n            dispatch(newMessageSentAC(message))\r\n        },\r\n        (user: UserType) => {\r\n            dispatch(writingUserAC(user))\r\n        }\r\n    )\r\n}\r\nexport const destroyChannelTC = () => (dispatch: Dispatch) => {\r\n    API.destroyChannel()\r\n}\r\nexport const setClientNameTC = (name: string) => (dispatch: Dispatch) => {\r\n    API.sendClientName(name)\r\n}\r\nexport const sendMessageTC = (message: string) => (dispatch: Dispatch) => {\r\n    API.sendMessage(message)\r\n}\r\nexport const writingMessageTC = () => (dispatch: Dispatch) => {\r\n    API.writingMessage()\r\n}\r\n\r\n","import {createStyles, makeStyles} from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);","import AppBar from \"@material-ui/core/AppBar\";\r\nimport React from \"react\";\r\nimport {useStyles} from \"./materialUIstyles\";\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\nexport const Header: React.FC = React.memo(() => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\">\r\n                    <Typography variant=\"h6\" color=\"inherit\">\r\n                        Simple chat\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n})","import {makeStyles} from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles({\r\n    root: {\r\n        width: 600,\r\n        height: 200,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n    },\r\n    title: {\r\n        fontSize: 24,\r\n        fontWeight: 600,\r\n    },\r\n});","import React from \"react\";\r\nimport {useStyles} from \"./materialUIstyles\";\r\nimport {Button, Card, CardActions, CardContent} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes/Routes\";\r\n\r\nexport const UserName: React.FC = React.memo(() => {\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n\r\n    const onClickWantEnterName = () => {\r\n        history.push(PATH.ENTER_USER_NAME)\r\n    }\r\n    const onClickCancelEnterName = () => {\r\n        history.push(PATH.CHAT)\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    Would you like entering your nickname?\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button variant=\"contained\" color=\"primary\" size=\"medium\" onClick={onClickWantEnterName}>Yes</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" size=\"medium\" onClick={onClickCancelEnterName}>No</Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n})","import {makeStyles} from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles({\r\n    root: {\r\n        width: 600,\r\n        height: 200,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    input :{\r\n        width: 200,\r\n        marginRight: 15,\r\n    }\r\n});","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Card, TextField} from \"@material-ui/core\";\r\nimport {useStyles} from \"./materialUIstyles\";\r\nimport {setClientNameTC} from \"../../bll/chat-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes/Routes\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nexport const EnterUserName: React.FC = React.memo(() => {\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [error, setError] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n\r\n    const onChangeNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickNameHandler = () => {\r\n        if (name.trim() !== \"\") {\r\n            dispatch(setClientNameTC(name))\r\n            history.push(PATH.CHAT)\r\n            setName(\"\")\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const messageError = error ? \"Please enter your nick name\" : \"\"\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <TextField className={classes.input} value={name} id=\"nick name\" label=\"nick name\"\r\n                       color={error ? \"secondary\" : \"primary\"} autoComplete=\"off\"\r\n                       onChange={onChangeNameHandler} helperText={messageError} onBlur={()=>setError(false)}/>\r\n            <Button disabled={error} variant=\"contained\" color=\"primary\" onClick={onClickNameHandler} size=\"small\">\r\n                Send Name\r\n            </Button>\r\n        </Card>\r\n    );\r\n})","import React from \"react\";\r\nimport {MessageType} from \"../../dal/api\";\r\n\r\ntype MessagePropsType = {\r\n    message: MessageType\r\n    className: string\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> = React.memo(({message, className}) => {\r\n    return (\r\n        <div className={className}>\r\n            <b>{message.user.name}: </b> <span>{message.message}</span>\r\n        </div>\r\n    );\r\n})","import {UserType} from \"../../dal/api\";\r\nimport React from \"react\";\r\n\r\ntype WritingUserPropsType = {\r\n    user: UserType\r\n    className: string\r\n}\r\n\r\nexport const WritingUser: React.FC<WritingUserPropsType> = React.memo(({user, className}) => {\r\n    return (\r\n        <div className={className}>\r\n            <b>{user.name}: </b> <span>...</span>\r\n        </div>\r\n    );\r\n})","import {makeStyles} from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        padding: 10,\r\n        minHeight: 550,\r\n        width: 350,\r\n    },\r\n    chatBlock: {\r\n        overflowY: \"scroll\",\r\n        height: 520,\r\n        minWidth: \"93%\"\r\n    },\r\n    message: {\r\n        backgroundColor: \"#e0e0e0\",\r\n        padding: 10,\r\n        borderRadius: 7,\r\n        \"&:nth-child(2n)\": {\r\n            backgroundColor: \"#eeeeee\"\r\n        }\r\n\r\n    },\r\n    formBlock: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        marginTop: 10,\r\n        position: \"relative\",\r\n    },\r\n    input: {\r\n        width: \"80%\"\r\n    },\r\n    button: {\r\n        position: \"absolute\",\r\n        right: 0\r\n    }\r\n});","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {MessageType, UserType} from \"../../dal/api\";\r\nimport {Message} from \"../../components/Message/Message\";\r\nimport {WritingUser} from \"../../components/WritingUser/WritingUser\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {sendMessageTC, writingMessageTC} from \"../../bll/chat-reducer\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport {useStyles} from \"./materialUIstyles\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport const Chat: React.FC = React.memo(() => {\r\n\r\n    const [value, setValue] = useState(\"\")\r\n    const messages = useSelector<AppRootStateType, Array<MessageType>>(state => state.chat.messages)\r\n    const writingUsers = useSelector<AppRootStateType, Array<UserType>>(state => state.chat.writingUsers)\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n    const [lastScrollTop, setLastScrollTop] = useState(0)\r\n    const messagesEndRef = useRef<HTMLDivElement | null>(null)\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            scrollToBottom()\r\n        }\r\n    }, [isAutoScroll, messages])\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n    }\r\n    const onScrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget\r\n        const maxScrollPosition = element.scrollHeight - element.clientHeight\r\n        const difference = Math.abs(maxScrollPosition - element.scrollTop)\r\n        if (element.scrollTop > lastScrollTop && difference < 10) {\r\n            setIsAutoScroll(true)\r\n        } else {\r\n            setIsAutoScroll(false)\r\n        }\r\n        setLastScrollTop(element.scrollTop)\r\n    }\r\n\r\n    const onChangeValueHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value)\r\n    }\r\n    const onKeyPressMessageHandler = () => {\r\n            dispatch(writingMessageTC())\r\n    }\r\n\r\n    const onClickSendMessageHandler = () => {\r\n        if (value.trim() !== \"\") {\r\n            dispatch(sendMessageTC(value))\r\n            setValue(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent onScroll={onScrollHandler} className={classes.chatBlock}>\r\n                {messages.map(m => {\r\n                    return <Message key={m.id} message={m} className={classes.message}/>\r\n\r\n                })}\r\n                {writingUsers.map(u => {\r\n                    return <WritingUser key={u.user_id} user={u} className={classes.message}/>\r\n\r\n                })}\r\n                <div ref={messagesEndRef}/>\r\n            </CardContent>\r\n            <div className={classes.formBlock}>\r\n                <TextField\r\n                    className={classes.input}\r\n                    id=\"message\"\r\n                    multiline\r\n                    maxRows={3}\r\n                    value={value}\r\n                    onChange={onChangeValueHandler}\r\n                    onKeyPress={onKeyPressMessageHandler}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    className={classes.button}\r\n                    onClick={onClickSendMessageHandler}\r\n                >\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </Card>\r\n    );\r\n})","import React from \"react\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {UserName} from \"../UserName/UserName\";\r\nimport {EnterUserName} from \"../EnterUserName/EnterUserName\";\r\nimport {Chat} from \"../../features/Chat/Chat\";\r\n\r\nexport const PATH = {\r\n    USER_NAME: \"/\",\r\n    ENTER_USER_NAME: \"/enter_user_name\",\r\n    CHAT: \"/chat\"\r\n}\r\n\r\nexport const Routes: React.FC = React.memo(() => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path={PATH.USER_NAME} render={() => <UserName/>}/>\r\n            <Route path={PATH.ENTER_USER_NAME} render={() => <EnterUserName/>}/>\r\n            <Route path={PATH.CHAT} render={() => <Chat/>}/>\r\n        </Switch>\r\n    );\r\n})","import React, {useEffect} from 'react';\nimport styles from './App.module.css';\nimport {useDispatch} from \"react-redux\";\nimport {createChannelTC, destroyChannelTC} from \"../../bll/chat-reducer\";\nimport {Header} from \"../../components/Header/Header\";\nimport {Routes} from \"../../components/Routes/Routes\";\n\n\nexport const App: React.FC = React.memo(() => {\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(createChannelTC())\n        return () => {\n            dispatch(destroyChannelTC())\n        }\n    }, [])\n\n\n    return (\n        <div className={styles.App}>\n            <Header/>\n            <div className={styles.main}>\n                <Routes/>\n            </div>\n            {/*<textarea value={message} onChange={onChangeMessageHandler} onKeyPress={onKeyPressMessageHandler}/>*/}\n        </div>\n    );\n})\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {chatReducer} from \"./chat-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    chat: chatReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './features/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__v49mH\",\"main\":\"App_main__2WR7A\"};"],"sourceRoot":""}